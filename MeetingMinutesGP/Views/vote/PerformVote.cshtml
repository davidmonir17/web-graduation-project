@using MeetingMinutesGP.Models
@model Option
@{
    ViewBag.Title = "PerformVote";
    GPEntities db = new GPEntities();
    Topic voteTopic = new Topic();
    Vote vote = (Vote)ViewData["Vote"];
    int topicID = vote.topicID;
    voteTopic = db.Topics.Where(a => a.TopicID == topicID).SingleOrDefault();
    List<Option> optionsList = (List<Option>)ViewData["optionsList"];
}
<style>
    .voteheader {
        background-color: #0e2737;
        padding: 15px;
        /*margin: 10px;*/
        /*width: 98%;*/
        margin-bottom: 10px;
        height: auto;
        text-align: center;
        color: white;
        font-size: 20px;
        font-weight: bold;
        border-radius: 8px;
        border-bottom: 6px solid #878787;
    }

    .votecontent {
        border-radius: 8px;
        border: 2px ridge #878787;
        padding: 0;
        border-radius: 8px;
        border-width: 1px 0 0 6px;
        border-style: solid;
        box-shadow: 0 7px 8px -4px rgba(0,0,0,.2), 0 12px 17px 2px rgba(0,0,0,.14), 0 5px 22px 4px rgba(0,0,0,.12);
        padding: 10px;
    }

    .votebtndiv {
        /*margin-bottom:20px;*/
    }

    .votebtn {
        background: #18bcaa;
        border: none;
        padding-top: 10px;
        margin-top: 10px;
        color: #fff;
        outline: none;
        margin-bottom: 10px;
        width: 25%;
        font-weight: bold;
    }

        .votebtn:hover {
            background: #878787;
            color: #fff;
        }

        .votebtn:focus {
            background: #878787;
            color: #fff;
        }




    [type="radio"]:checked,
    [type="radio"]:not(:checked) {
        position: absolute;
        left: -9999px;
    }

        [type="radio"]:checked + label,
        [type="radio"]:not(:checked) + label {
            position: relative;
            padding-left: 28px;
            cursor: pointer;
            line-height: 20px;
            display: inline-block;
            color: #666;
        }

            [type="radio"]:checked + label:before,
            [type="radio"]:not(:checked) + label:before {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                width: 18px;
                height: 18px;
                border: 1px solid #ddd;
                border-radius: 100%;
                background: #fff;
            }

            [type="radio"]:checked + label:after,
            [type="radio"]:not(:checked) + label:after {
                content: '';
                width: 12px;
                height: 12px;
                background: #18bcaa;
                position: absolute;
                top: 3px;
                left: 3px;
                border-radius: 100%;
                -webkit-transition: all 0.2s ease;
                transition: all 0.2s ease;
            }

            [type="radio"]:not(:checked) + label:after {
                opacity: 0;
                -webkit-transform: scale(0);
                transform: scale(0);
            }

            [type="radio"]:checked + label:after {
                opacity: 1;
                -webkit-transform: scale(1);
                transform: scale(1);
            }

    .votename {
        font-weight: bold;
    }
</style>
<div class="col-sm-12 voteheader" align="center">
    <strong>Topic name: @voteTopic.TopicName</strong>
</div>

<div class="col-md-12 votecontent">
    <h4 class="votename" align="center">Perform vote on (@vote.VoteName)</h4>
    @using (Html.BeginForm("UserVote", "vote"))
    {
        int maxvoteindex = 0;
        for (int i = 0; i < optionsList.Count; i++)
        {
            if (optionsList[i].OptionCount > optionsList[maxvoteindex].OptionCount)
            {
                maxvoteindex = i;
            }
            string voteid = "OptionID" + i;
            if (i == 0)
            {
                <p align="center">
                    @Html.RadioButtonFor(m => m.OptionID, optionsList[i].OptionID, new { id = @voteid, @checked = "checked" })
                    <label for=@voteid>@optionsList[i].OptionDescription, Count: @optionsList[i].OptionCount</label>
                </p>
            }
            else
            {
                <p align="center">
                    @Html.RadioButtonFor(m => m.OptionID, optionsList[i].OptionID, new { id = @voteid })
                    <label for=@voteid>@optionsList[i].OptionDescription, Count: @optionsList[i].OptionCount</label>
                </p>
            }
        }
        int maxcount = 0;
        for (int i = 0; i < optionsList.Count; i++)
        {
            if (optionsList[i].OptionCount == optionsList[maxvoteindex].OptionCount)
            {
                maxcount++;
            }
        }
        <div align="center" class="votebtndiv">
            <button type="submit" class="share btn btn-default votebtn"> Vote <span class="glyphicon glyphicon-thumbs-up"> </span> <span class="glyphicon glyphicon-thumbs-down"></span></button>
        </div>
        if (maxcount > 0)
        {
            <div align="center">
                <label>Vote result untile now: Not applicable</label>
            </div>
        }
        else
        {
            <div align="center">
                <label>Vote result can not determined</label>
            </div>
        }
    }
</div>
